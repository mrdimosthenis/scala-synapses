pages = [{"l":"api/index.html","n":"API","t":" API","d":"api"},
{"l":"api/synapses.html","n":"synapses","t":"package synapses","d":"synapses"},
{"l":"api/synapses/Documentation$.html","n":"Documentation","t":"object Documentation","d":"synapses/Documentation$"},
{"l":"api/synapses/jvm.html","n":"synapses.jvm","t":"package synapses.jvm","d":"synapses/jvm"},
{"l":"api/synapses/jvm/CodecJ.html","n":"CodecJ","t":"class CodecJ(codec: Codec)","d":"synapses/jvm/CodecJ"},
{"l":"api/synapses/jvm/CodecJ.html","n":"encode","t":"def encode(datapoint: Map[String, String]): Array[Double]","d":"synapses/jvm/CodecJ"},
{"l":"api/synapses/jvm/CodecJ.html","n":"decode","t":"def decode(encodedValues: Array[Double]): Map[String, String]","d":"synapses/jvm/CodecJ"},
{"l":"api/synapses/jvm/CodecJ.html","n":"json","t":"def json(): String","d":"synapses/jvm/CodecJ"},
{"l":"api/synapses/jvm/CodecJ$.html","n":"CodecJ","t":"object CodecJ","d":"synapses/jvm/CodecJ$"},
{"l":"api/synapses/jvm/CodecJ$.html","n":"apply","t":"def apply(keysWithFlags: Array[AttributeWithFlag], datapoints: Stream[Map[String, String]]): CodecJ","d":"synapses/jvm/CodecJ$"},
{"l":"api/synapses/jvm/CodecJ$.html","n":"apply","t":"def apply(json: String): CodecJ","d":"synapses/jvm/CodecJ$"},
{"l":"api/synapses/jvm/NetJ.html","n":"NetJ","t":"class NetJ(net: Net)","d":"synapses/jvm/NetJ"},
{"l":"api/synapses/jvm/NetJ.html","n":"predict","t":"def predict(inputValues: Array[Double]): Array[Double]","d":"synapses/jvm/NetJ"},
{"l":"api/synapses/jvm/NetJ.html","n":"parPredict","t":"def parPredict(inputValues: Array[Double]): Array[Double]","d":"synapses/jvm/NetJ"},
{"l":"api/synapses/jvm/NetJ.html","n":"errors","t":"def errors(inputValues: Array[Double], expectedOutput: Array[Double], inParallel: Boolean): Array[Double]","d":"synapses/jvm/NetJ"},
{"l":"api/synapses/jvm/NetJ.html","n":"fit","t":"def fit(learningRate: Double, inputValues: Array[Double], expectedOutput: Array[Double]): NetJ","d":"synapses/jvm/NetJ"},
{"l":"api/synapses/jvm/NetJ.html","n":"fitPar","t":"def fitPar(learningRate: Double, inputValues: Array[Double], expectedOutput: Array[Double]): NetJ","d":"synapses/jvm/NetJ"},
{"l":"api/synapses/jvm/NetJ.html","n":"json","t":"def json(): String","d":"synapses/jvm/NetJ"},
{"l":"api/synapses/jvm/NetJ.html","n":"svg","t":"def svg(): String","d":"synapses/jvm/NetJ"},
{"l":"api/synapses/jvm/NetJ$.html","n":"NetJ","t":"object NetJ","d":"synapses/jvm/NetJ$"},
{"l":"api/synapses/jvm/NetJ$.html","n":"apply","t":"def apply(layerSizes: Array[Int], activationF: IntFunction[Fun], weightInitF: IntFunction[Double]): NetJ","d":"synapses/jvm/NetJ$"},
{"l":"api/synapses/jvm/NetJ$.html","n":"apply","t":"def apply(layerSizes: Array[Int]): NetJ","d":"synapses/jvm/NetJ$"},
{"l":"api/synapses/jvm/NetJ$.html","n":"apply","t":"def apply(layerSizes: Array[Int], seed: Long): NetJ","d":"synapses/jvm/NetJ$"},
{"l":"api/synapses/jvm/NetJ$.html","n":"apply","t":"def apply(json: String): NetJ","d":"synapses/jvm/NetJ$"},
{"l":"api/synapses/jvm/StatsJ$.html","n":"StatsJ","t":"object StatsJ","d":"synapses/jvm/StatsJ$"},
{"l":"api/synapses/jvm/StatsJ$.html","n":"rmse","t":"def rmse(outputPairs: Stream[Array[Array[Double]]]): Double","d":"synapses/jvm/StatsJ$"},
{"l":"api/synapses/jvm/StatsJ$.html","n":"score","t":"def score(outputPairs: Stream[Array[Array[Double]]]): Double","d":"synapses/jvm/StatsJ$"},
{"l":"api/synapses/lib.html","n":"synapses.lib","t":"package synapses.lib","d":"synapses/lib"},
{"l":"api/synapses/lib.html","n":"Fun","t":"type Fun = Activation","d":"synapses/lib"},
{"l":"api/synapses/lib/Codec.html","n":"Codec","t":"class Codec(attributes: LazyList[Attribute])","d":"synapses/lib/Codec"},
{"l":"api/synapses/lib/Codec.html","n":"encode","t":"def encode(datapoint: Map[String, String]): List[Double]","d":"synapses/lib/Codec"},
{"l":"api/synapses/lib/Codec.html","n":"decode","t":"def decode(encodedValues: List[Double]): Map[String, String]","d":"synapses/lib/Codec"},
{"l":"api/synapses/lib/Codec.html","n":"json","t":"def json(): String","d":"synapses/lib/Codec"},
{"l":"api/synapses/lib/Codec$.html","n":"Codec","t":"object Codec","d":"synapses/lib/Codec$"},
{"l":"api/synapses/lib/Codec$.html","n":"apply","t":"def apply(attributesWithFlag: List[(String, Boolean)], datapoints: Iterator[Map[String, String]]): Codec","d":"synapses/lib/Codec$"},
{"l":"api/synapses/lib/Codec$.html","n":"apply","t":"def apply(json: String): Codec","d":"synapses/lib/Codec$"},
{"l":"api/synapses/lib/Fun$.html","n":"Fun","t":"object Fun","d":"synapses/lib/Fun$"},
{"l":"api/synapses/lib/Fun$.html","n":"sigmoid","t":"val sigmoid: Fun","d":"synapses/lib/Fun$"},
{"l":"api/synapses/lib/Fun$.html","n":"identity","t":"val identity: Fun","d":"synapses/lib/Fun$"},
{"l":"api/synapses/lib/Fun$.html","n":"tanh","t":"val tanh: Fun","d":"synapses/lib/Fun$"},
{"l":"api/synapses/lib/Fun$.html","n":"leakyReLU","t":"val leakyReLU: Fun","d":"synapses/lib/Fun$"},
{"l":"api/synapses/lib/Net.html","n":"Net","t":"class Net(layers: LazyList[Layer])","d":"synapses/lib/Net"},
{"l":"api/synapses/lib/Net.html","n":"predict","t":"def predict(inputValues: List[Double]): List[Double]","d":"synapses/lib/Net"},
{"l":"api/synapses/lib/Net.html","n":"parPredict","t":"def parPredict(inputValues: List[Double]): List[Double]","d":"synapses/lib/Net"},
{"l":"api/synapses/lib/Net.html","n":"errors","t":"def errors(inputValues: List[Double], expectedOutput: List[Double], inParallel: Boolean): List[Double]","d":"synapses/lib/Net"},
{"l":"api/synapses/lib/Net.html","n":"fit","t":"def fit(learningRate: Double, inputValues: List[Double], expectedOutput: List[Double]): Net","d":"synapses/lib/Net"},
{"l":"api/synapses/lib/Net.html","n":"parFit","t":"def parFit(learningRate: Double, inputValues: List[Double], expectedOutput: List[Double]): Net","d":"synapses/lib/Net"},
{"l":"api/synapses/lib/Net.html","n":"json","t":"def json(): String","d":"synapses/lib/Net"},
{"l":"api/synapses/lib/Net.html","n":"svg","t":"def svg(): String","d":"synapses/lib/Net"},
{"l":"api/synapses/lib/Net$.html","n":"Net","t":"object Net","d":"synapses/lib/Net$"},
{"l":"api/synapses/lib/Net$.html","n":"apply","t":"def apply(layerSizes: List[Int], activationF: Int => Fun, weightInitF: Int => Double): Net","d":"synapses/lib/Net$"},
{"l":"api/synapses/lib/Net$.html","n":"apply","t":"def apply(layerSizes: List[Int]): Net","d":"synapses/lib/Net$"},
{"l":"api/synapses/lib/Net$.html","n":"apply","t":"def apply(layerSizes: List[Int], seed: Long): Net","d":"synapses/lib/Net$"},
{"l":"api/synapses/lib/Net$.html","n":"apply","t":"def apply(json: String): Net","d":"synapses/lib/Net$"},
{"l":"api/synapses/lib/Stats$.html","n":"Stats","t":"object Stats","d":"synapses/lib/Stats$"},
{"l":"api/synapses/lib/Stats$.html","n":"rmse","t":"def rmse(outputPairs: Iterator[(List[Double], List[Double])]): Double","d":"synapses/lib/Stats$"},
{"l":"api/synapses/lib/Stats$.html","n":"score","t":"def score(outputPairs: Iterator[(List[Double], List[Double])]): Double","d":"synapses/lib/Stats$"},
{"l":"api/synapses/model.html","n":"synapses.model","t":"package synapses.model","d":"synapses/model"},
{"l":"api/synapses/model/Draw$.html","n":"Draw","t":"object Draw","d":"synapses/model/Draw$"},
{"l":"api/synapses/model/Draw$.html","n":"networkSVG","t":"def networkSVG(network: Network): String","d":"synapses/model/Draw$"},
{"l":"api/synapses/model/Mathematics$.html","n":"Mathematics","t":"object Mathematics","d":"synapses/model/Mathematics$"},
{"l":"api/synapses/model/Mathematics$.html","n":"sigmoid","t":"def sigmoid(x: Double): Double","d":"synapses/model/Mathematics$"},
{"l":"api/synapses/model/Mathematics$.html","n":"dotProduct","t":"def dotProduct(xs: LazyList[Double], ys: LazyList[Double]): Double","d":"synapses/model/Mathematics$"},
{"l":"api/synapses/model/Mathematics$.html","n":"euclideanDistance","t":"def euclideanDistance(xs: LazyList[Double], ys: LazyList[Double]): Double","d":"synapses/model/Mathematics$"},
{"l":"api/synapses/model/Mathematics$.html","n":"rootMeanSquareError","t":"def rootMeanSquareError(yHatsWithYs: Iterator[(LazyList[Double], LazyList[Double])]): Double","d":"synapses/model/Mathematics$"},
{"l":"api/synapses/model/Mathematics$.html","n":"accuracy","t":"def accuracy(yHatsWithYs: Iterator[(LazyList[Double], LazyList[Double])]): Double","d":"synapses/model/Mathematics$"},
{"l":"api/synapses/model/encoding.html","n":"synapses.model.encoding","t":"package synapses.model.encoding","d":"synapses/model/encoding"},
{"l":"api/synapses/model/encoding.html","n":"Preprocessor","t":"type Preprocessor = LazyList[Attribute]","d":"synapses/model/encoding"},
{"l":"api/synapses/model/encoding/Preprocessor$.html","n":"Preprocessor","t":"object Preprocessor","d":"synapses/model/encoding/Preprocessor$"},
{"l":"api/synapses/model/encoding/Preprocessor$.html","n":"init","t":"def init(keysWithFlags: LazyList[(String, Boolean)], dataset: Iterator[Map[String, String]]): Preprocessor","d":"synapses/model/encoding/Preprocessor$"},
{"l":"api/synapses/model/encoding/Preprocessor$.html","n":"encode","t":"def encode(datapoint: Map[String, String])(preprocessor: Preprocessor): LazyList[Double]","d":"synapses/model/encoding/Preprocessor$"},
{"l":"api/synapses/model/encoding/Preprocessor$.html","n":"decode","t":"def decode(encodedDatapoint: LazyList[Double])(preprocessor: Preprocessor): Map[String, String]","d":"synapses/model/encoding/Preprocessor$"},
{"l":"api/synapses/model/encoding/Preprocessor$.html","n":"toJson","t":"def toJson(preprocessor: Preprocessor): String","d":"synapses/model/encoding/Preprocessor$"},
{"l":"api/synapses/model/encoding/Preprocessor$.html","n":"ofJson","t":"def ofJson(json: String): Preprocessor","d":"synapses/model/encoding/Preprocessor$"},
{"l":"api/synapses/model/encoding/attribute.html","n":"synapses.model.encoding.attribute","t":"package synapses.model.encoding.attribute","d":"synapses/model/encoding/attribute"},
{"l":"api/synapses/model/encoding/attribute/Attribute.html","n":"Attribute","t":"enum Attribute(val key: String)","d":"synapses/model/encoding/attribute/Attribute"},
{"l":"api/synapses/model/encoding/attribute/Attribute$$Discrete.html","n":"Discrete","t":"case Discrete(s: String, values: LazyList[String]) extends Attribute","d":"synapses/model/encoding/attribute/Attribute"},
{"l":"api/synapses/model/encoding/attribute/Attribute$$Continuous.html","n":"Continuous","t":"case Continuous(s: String, min: Double, max: Double) extends Attribute","d":"synapses/model/encoding/attribute/Attribute"},
{"l":"api/synapses/model/encoding/attribute/Attribute$$Discrete.html","n":"Discrete","t":"case Discrete(s: String, values: LazyList[String]) extends Attribute","d":"synapses/model/encoding/attribute/Attribute$$Discrete"},
{"l":"api/synapses/model/encoding/attribute/Attribute$$Continuous.html","n":"Continuous","t":"case Continuous(s: String, min: Double, max: Double) extends Attribute","d":"synapses/model/encoding/attribute/Attribute$$Continuous"},
{"l":"api/synapses/model/encoding/attribute/Attribute$.html","n":"Attribute","t":"object Attribute","d":"synapses/model/encoding/attribute/Attribute$"},
{"l":"api/synapses/model/encoding/attribute/Attribute$.html","n":"realize","t":"def realize(attribute: Attribute): Attribute","d":"synapses/model/encoding/attribute/Attribute$"},
{"l":"api/synapses/model/encoding/attribute/Attribute$.html","n":"parse","t":"def parse(s: String): Double","d":"synapses/model/encoding/attribute/Attribute$"},
{"l":"api/synapses/model/encoding/attribute/Attribute$.html","n":"updated","t":"def updated(datapoint: Map[String, String])(attribute: Attribute): Attribute","d":"synapses/model/encoding/attribute/Attribute$"},
{"l":"api/synapses/model/encoding/attribute/Attribute$.html","n":"encode","t":"def encode(v: String)(attribute: Attribute): LazyList[Double]","d":"synapses/model/encoding/attribute/Attribute$"},
{"l":"api/synapses/model/encoding/attribute/Attribute$.html","n":"decode","t":"def decode(encodedValues: LazyList[Double])(attribute: Attribute): String","d":"synapses/model/encoding/attribute/Attribute$"},
{"l":"api/synapses/model/encoding/attribute/AttributeSerialized$.html","n":"AttributeSerialized","t":"object AttributeSerialized","d":"synapses/model/encoding/attribute/AttributeSerialized$"},
{"l":"api/synapses/model/encoding/attribute/AttributeSerialized$.html","n":"serialized","t":"def serialized(attribute: Attribute): Json","d":"synapses/model/encoding/attribute/AttributeSerialized$"},
{"l":"api/synapses/model/encoding/attribute/AttributeSerialized$.html","n":"deserialized","t":"def deserialized(json: Json): Attribute","d":"synapses/model/encoding/attribute/AttributeSerialized$"},
{"l":"api/synapses/model/net_elems/activation.html","n":"synapses.model.net_elems.activation","t":"package synapses.model.net_elems.activation","d":"synapses/model/net_elems/activation"},
{"l":"api/synapses/model/net_elems/activation.html","n":"ActivationSerialized","t":"type ActivationSerialized = String","d":"synapses/model/net_elems/activation"},
{"l":"api/synapses/model/net_elems/activation/Activation.html","n":"Activation","t":"enum Activation(val f: Double => Double, val deriv: Double => Double, val inverse: Double => Double)","d":"synapses/model/net_elems/activation/Activation"},
{"l":"api/synapses/model/net_elems/activation/Activation.html","n":"Sigmoid","t":"case Sigmoid extends Activation","d":"synapses/model/net_elems/activation/Activation"},
{"l":"api/synapses/model/net_elems/activation/Activation.html","n":"Identity","t":"case Identity extends Activation","d":"synapses/model/net_elems/activation/Activation"},
{"l":"api/synapses/model/net_elems/activation/Activation.html","n":"Tanh","t":"case Tanh extends Activation","d":"synapses/model/net_elems/activation/Activation"},
{"l":"api/synapses/model/net_elems/activation/Activation.html","n":"LeakyReLU","t":"case LeakyReLU extends Activation","d":"synapses/model/net_elems/activation/Activation"},
{"l":"api/synapses/model/net_elems/activation/ActivationSerialized$.html","n":"ActivationSerialized","t":"object ActivationSerialized","d":"synapses/model/net_elems/activation/ActivationSerialized$"},
{"l":"api/synapses/model/net_elems/activation/ActivationSerialized$.html","n":"serialized","t":"def serialized(activation: Activation): ActivationSerialized","d":"synapses/model/net_elems/activation/ActivationSerialized$"},
{"l":"api/synapses/model/net_elems/activation/ActivationSerialized$.html","n":"deserialized","t":"def deserialized(activationSerialized: ActivationSerialized): Activation","d":"synapses/model/net_elems/activation/ActivationSerialized$"},
{"l":"api/synapses/model/net_elems/layer.html","n":"synapses.model.net_elems.layer","t":"package synapses.model.net_elems.layer","d":"synapses/model/net_elems/layer"},
{"l":"api/synapses/model/net_elems/layer.html","n":"Layer","t":"type Layer = LazyList[Neuron]","d":"synapses/model/net_elems/layer"},
{"l":"api/synapses/model/net_elems/layer.html","n":"LayerSerialized","t":"type LayerSerialized = List[NeuronSerialized]","d":"synapses/model/net_elems/layer"},
{"l":"api/synapses/model/net_elems/layer/Layer$.html","n":"Layer","t":"object Layer","d":"synapses/model/net_elems/layer/Layer$"},
{"l":"api/synapses/model/net_elems/layer/Layer$.html","n":"realize","t":"def realize(layer: Layer): Layer","d":"synapses/model/net_elems/layer/Layer$"},
{"l":"api/synapses/model/net_elems/layer/Layer$.html","n":"pmap","t":"def pmap[A](f: A => B): LazyList[B]","d":"synapses/model/net_elems/layer/Layer$"},
{"l":"api/synapses/model/net_elems/layer/Layer$.html","n":"init","t":"def init(inputSize: Int, outputSize: Int, activation: Activation, weightInitF: => Double): Layer","d":"synapses/model/net_elems/layer/Layer$"},
{"l":"api/synapses/model/net_elems/layer/Layer$.html","n":"output","t":"def output(input: LazyList[Double], inParallel: Boolean)(layer: Layer): LazyList[Double]","d":"synapses/model/net_elems/layer/Layer$"},
{"l":"api/synapses/model/net_elems/layer/Layer$.html","n":"backPropagated","t":"def backPropagated(learningRate: Double, input: LazyList[Double], outputWithErrors: LazyList[(Double, Double)], inParallel: Boolean)(layer: Layer): (LazyList[Double], Layer)","d":"synapses/model/net_elems/layer/Layer$"},
{"l":"api/synapses/model/net_elems/layer/LayerSerialized$.html","n":"LayerSerialized","t":"object LayerSerialized","d":"synapses/model/net_elems/layer/LayerSerialized$"},
{"l":"api/synapses/model/net_elems/layer/LayerSerialized$.html","n":"serialized","t":"def serialized(layer: Layer): LayerSerialized","d":"synapses/model/net_elems/layer/LayerSerialized$"},
{"l":"api/synapses/model/net_elems/layer/LayerSerialized$.html","n":"deserialized","t":"def deserialized(layerSerialized: LayerSerialized): Layer","d":"synapses/model/net_elems/layer/LayerSerialized$"},
{"l":"api/synapses/model/net_elems/network.html","n":"synapses.model.net_elems.network","t":"package synapses.model.net_elems.network","d":"synapses/model/net_elems/network"},
{"l":"api/synapses/model/net_elems/network.html","n":"Network","t":"type Network = LazyList[Layer]","d":"synapses/model/net_elems/network"},
{"l":"api/synapses/model/net_elems/network.html","n":"NetworkSerialized","t":"type NetworkSerialized = List[LayerSerialized]","d":"synapses/model/net_elems/network"},
{"l":"api/synapses/model/net_elems/network/Network$.html","n":"Network","t":"object Network","d":"synapses/model/net_elems/network/Network$"},
{"l":"api/synapses/model/net_elems/network/Network$.html","n":"realize","t":"def realize(network: Network): Network","d":"synapses/model/net_elems/network/Network$"},
{"l":"api/synapses/model/net_elems/network/Network$.html","n":"init","t":"def init(layerSizes: LazyList[Int], activationF: Int => Activation, weightInitF: Int => Double): Network","d":"synapses/model/net_elems/network/Network$"},
{"l":"api/synapses/model/net_elems/network/Network$.html","n":"output","t":"def output(input: LazyList[Double], inParallel: Boolean)(network: Network): LazyList[Double]","d":"synapses/model/net_elems/network/Network$"},
{"l":"api/synapses/model/net_elems/network/Network$.html","n":"errors","t":"def errors(input: LazyList[Double], expectedOutput: LazyList[Double], inParallel: Boolean)(network: Network): LazyList[Double]","d":"synapses/model/net_elems/network/Network$"},
{"l":"api/synapses/model/net_elems/network/Network$.html","n":"fit","t":"def fit(learningRate: Double, input: LazyList[Double], expectedOutput: LazyList[Double], inParallel: Boolean)(network: Network): Network","d":"synapses/model/net_elems/network/Network$"},
{"l":"api/synapses/model/net_elems/network/NetworkSerialized$.html","n":"NetworkSerialized","t":"object NetworkSerialized","d":"synapses/model/net_elems/network/NetworkSerialized$"},
{"l":"api/synapses/model/net_elems/network/NetworkSerialized$.html","n":"toJson","t":"def toJson(network: Network): String","d":"synapses/model/net_elems/network/NetworkSerialized$"},
{"l":"api/synapses/model/net_elems/network/NetworkSerialized$.html","n":"ofJson","t":"def ofJson(s: String): Network","d":"synapses/model/net_elems/network/NetworkSerialized$"},
{"l":"api/synapses/model/net_elems/neuron.html","n":"synapses.model.net_elems.neuron","t":"package synapses.model.net_elems.neuron","d":"synapses/model/net_elems/neuron"},
{"l":"api/synapses/model/net_elems/neuron/Neuron.html","n":"Neuron","t":"class Neuron(activationF: Activation, weights: LazyList[Double])","d":"synapses/model/net_elems/neuron/Neuron"},
{"l":"api/synapses/model/net_elems/neuron/Neuron$.html","n":"Neuron","t":"object Neuron","d":"synapses/model/net_elems/neuron/Neuron$"},
{"l":"api/synapses/model/net_elems/neuron/Neuron$.html","n":"realize","t":"def realize(neuron: Neuron): Neuron","d":"synapses/model/net_elems/neuron/Neuron$"},
{"l":"api/synapses/model/net_elems/neuron/Neuron$.html","n":"init","t":"def init(inputSize: Int, activationF: Activation, weightInitF: => Double): Neuron","d":"synapses/model/net_elems/neuron/Neuron$"},
{"l":"api/synapses/model/net_elems/neuron/Neuron$.html","n":"output","t":"def output(input: LazyList[Double])(neuron: Neuron): Double","d":"synapses/model/net_elems/neuron/Neuron$"},
{"l":"api/synapses/model/net_elems/neuron/Neuron$.html","n":"backPropagated","t":"def backPropagated(learningRate: Double, input: LazyList[Double], outputWithError: (Double, Double))(neuron: Neuron): (LazyList[Double], Neuron)","d":"synapses/model/net_elems/neuron/Neuron$"},
{"l":"api/synapses/model/net_elems/neuron/NeuronSerialized.html","n":"NeuronSerialized","t":"class NeuronSerialized(activationF: ActivationSerialized, weights: List[Double])","d":"synapses/model/net_elems/neuron/NeuronSerialized"},
{"l":"api/synapses/model/net_elems/neuron/NeuronSerialized$.html","n":"NeuronSerialized","t":"object NeuronSerialized","d":"synapses/model/net_elems/neuron/NeuronSerialized$"},
{"l":"api/synapses/model/net_elems/neuron/NeuronSerialized$.html","n":"serialized","t":"def serialized(neuron: Neuron): NeuronSerialized","d":"synapses/model/net_elems/neuron/NeuronSerialized$"},
{"l":"api/synapses/model/net_elems/neuron/NeuronSerialized$.html","n":"deserialized","t":"def deserialized(neuronSerialized: NeuronSerialized): Neuron","d":"synapses/model/net_elems/neuron/NeuronSerialized$"},
{"l":"api/index.html","n":"API","t":" API","d":"api"}];